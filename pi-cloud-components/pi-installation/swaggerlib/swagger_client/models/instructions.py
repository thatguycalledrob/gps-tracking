# coding: utf-8

"""
    Van Tracker Piside

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Instructions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruction': 'str'
    }

    attribute_map = {
        'instruction': 'instruction'
    }

    def __init__(self, instruction=None):  # noqa: E501
        """Instructions - a model defined in Swagger"""  # noqa: E501

        self._instruction = None
        self.discriminator = None

        self.instruction = instruction

    @property
    def instruction(self):
        """Gets the instruction of this Instructions.  # noqa: E501


        :return: The instruction of this Instructions.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this Instructions.


        :param instruction: The instruction of this Instructions.  # noqa: E501
        :type: str
        """
        if instruction is None:
            raise ValueError("Invalid value for `instruction`, must not be `None`")  # noqa: E501
        allowed_values = ["restart", "startVnc", "do-nothing"]  # noqa: E501
        if instruction not in allowed_values:
            raise ValueError(
                "Invalid value for `instruction` ({0}), must be one of {1}"  # noqa: E501
                .format(instruction, allowed_values)
            )

        self._instruction = instruction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Instructions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instructions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
