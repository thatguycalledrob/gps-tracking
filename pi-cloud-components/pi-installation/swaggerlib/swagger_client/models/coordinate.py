# coding: utf-8

"""
    Van Tracker Piside

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Coordinate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'sats': 'float',
        'lat': 'float',
        'long': 'float',
        'alt': 'float',
        'order': 'float'
    }

    attribute_map = {
        'time': 'time',
        'sats': 'sats',
        'lat': 'lat',
        'long': 'long',
        'alt': 'alt',
        'order': 'order'
    }

    def __init__(self, time=None, sats=None, lat=None, long=None, alt=None, order=None):  # noqa: E501
        """Coordinate - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._sats = None
        self._lat = None
        self._long = None
        self._alt = None
        self._order = None
        self.discriminator = None

        self.time = time
        self.sats = sats
        self.lat = lat
        self.long = long
        self.alt = alt
        if order is not None:
            self.order = order

    @property
    def time(self):
        """Gets the time of this Coordinate.  # noqa: E501


        :return: The time of this Coordinate.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Coordinate.


        :param time: The time of this Coordinate.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def sats(self):
        """Gets the sats of this Coordinate.  # noqa: E501


        :return: The sats of this Coordinate.  # noqa: E501
        :rtype: float
        """
        return self._sats

    @sats.setter
    def sats(self, sats):
        """Sets the sats of this Coordinate.


        :param sats: The sats of this Coordinate.  # noqa: E501
        :type: float
        """
        if sats is None:
            raise ValueError("Invalid value for `sats`, must not be `None`")  # noqa: E501

        self._sats = sats

    @property
    def lat(self):
        """Gets the lat of this Coordinate.  # noqa: E501


        :return: The lat of this Coordinate.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Coordinate.


        :param lat: The lat of this Coordinate.  # noqa: E501
        :type: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this Coordinate.  # noqa: E501


        :return: The long of this Coordinate.  # noqa: E501
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this Coordinate.


        :param long: The long of this Coordinate.  # noqa: E501
        :type: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")  # noqa: E501

        self._long = long

    @property
    def alt(self):
        """Gets the alt of this Coordinate.  # noqa: E501


        :return: The alt of this Coordinate.  # noqa: E501
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this Coordinate.


        :param alt: The alt of this Coordinate.  # noqa: E501
        :type: float
        """
        if alt is None:
            raise ValueError("Invalid value for `alt`, must not be `None`")  # noqa: E501

        self._alt = alt

    @property
    def order(self):
        """Gets the order of this Coordinate.  # noqa: E501


        :return: The order of this Coordinate.  # noqa: E501
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Coordinate.


        :param order: The order of this Coordinate.  # noqa: E501
        :type: float
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Coordinate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coordinate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
