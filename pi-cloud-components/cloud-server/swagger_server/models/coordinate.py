# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Coordinate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, time: int=None, sats: float=None, lat: float=None, long: float=None, alt: float=None, order: float=None):  # noqa: E501
        """Coordinate - a model defined in Swagger

        :param time: The time of this Coordinate.  # noqa: E501
        :type time: int
        :param sats: The sats of this Coordinate.  # noqa: E501
        :type sats: float
        :param lat: The lat of this Coordinate.  # noqa: E501
        :type lat: float
        :param long: The long of this Coordinate.  # noqa: E501
        :type long: float
        :param alt: The alt of this Coordinate.  # noqa: E501
        :type alt: float
        :param order: The order of this Coordinate.  # noqa: E501
        :type order: float
        """
        self.swagger_types = {
            'time': int,
            'sats': float,
            'lat': float,
            'long': float,
            'alt': float,
            'order': float
        }

        self.attribute_map = {
            'time': 'time',
            'sats': 'sats',
            'lat': 'lat',
            'long': 'long',
            'alt': 'alt',
            'order': 'order'
        }

        self._time = time
        self._sats = sats
        self._lat = lat
        self._long = long
        self._alt = alt
        self._order = order

    @classmethod
    def from_dict(cls, dikt) -> 'Coordinate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The coordinate of this Coordinate.  # noqa: E501
        :rtype: Coordinate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time(self) -> int:
        """Gets the time of this Coordinate.


        :return: The time of this Coordinate.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this Coordinate.


        :param time: The time of this Coordinate.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def sats(self) -> float:
        """Gets the sats of this Coordinate.


        :return: The sats of this Coordinate.
        :rtype: float
        """
        return self._sats

    @sats.setter
    def sats(self, sats: float):
        """Sets the sats of this Coordinate.


        :param sats: The sats of this Coordinate.
        :type sats: float
        """
        if sats is None:
            raise ValueError("Invalid value for `sats`, must not be `None`")  # noqa: E501

        self._sats = sats

    @property
    def lat(self) -> float:
        """Gets the lat of this Coordinate.


        :return: The lat of this Coordinate.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this Coordinate.


        :param lat: The lat of this Coordinate.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def long(self) -> float:
        """Gets the long of this Coordinate.


        :return: The long of this Coordinate.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long: float):
        """Sets the long of this Coordinate.


        :param long: The long of this Coordinate.
        :type long: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")  # noqa: E501

        self._long = long

    @property
    def alt(self) -> float:
        """Gets the alt of this Coordinate.


        :return: The alt of this Coordinate.
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt: float):
        """Sets the alt of this Coordinate.


        :param alt: The alt of this Coordinate.
        :type alt: float
        """
        if alt is None:
            raise ValueError("Invalid value for `alt`, must not be `None`")  # noqa: E501

        self._alt = alt

    @property
    def order(self) -> float:
        """Gets the order of this Coordinate.


        :return: The order of this Coordinate.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order: float):
        """Sets the order of this Coordinate.


        :param order: The order of this Coordinate.
        :type order: float
        """

        self._order = order
